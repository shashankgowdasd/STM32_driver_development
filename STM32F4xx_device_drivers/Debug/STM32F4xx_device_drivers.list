
STM32F4xx_device_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000990  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000b24  08000b24  00010b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b34  08000b34  00010b3c  2**0
                  CONTENTS
  4 .ARM          00000000  08000b34  08000b34  00010b3c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b34  08000b3c  00010b3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b34  08000b34  00010b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b38  08000b38  00010b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000b3c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000b3c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010b3c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002bc8  00000000  00000000  00010b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006f6  00000000  00000000  00013734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000150  00000000  00000000  00013e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000118  00000000  00000000  00013f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000280c  00000000  00000000  00014098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001b9b  00000000  00000000  000168a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009dd1  00000000  00000000  0001843f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00022210  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000049c  00000000  00000000  00022264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000b0c 	.word	0x08000b0c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000b0c 	.word	0x08000b0c

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <SPI1_GPIOInits>:
 * PA7 -> SPI1_MOSI
 * Alternate function mode : 5
 */

void SPI1_GPIOInits(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b084      	sub	sp, #16
 80001e8:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	// configure the SPI gpio pins
	SPIPins.pGPIOx = GPIOA;
 80001ea:	4b0e      	ldr	r3, [pc, #56]	; (8000224 <SPI1_GPIOInits+0x40>)
 80001ec:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_Config.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001ee:	2302      	movs	r3, #2
 80001f0:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_Config.GPIO_PinAltFunMode = 5;
 80001f2:	2305      	movs	r3, #5
 80001f4:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_Config.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80001f6:	2300      	movs	r3, #0
 80001f8:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_Config.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80001fa:	2302      	movs	r3, #2
 80001fc:	72bb      	strb	r3, [r7, #10]
	SPIPins.GPIO_Config.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80001fe:	2300      	movs	r3, #0
 8000200:	72fb      	strb	r3, [r7, #11]
	// NSS
	//SPIPins.GPIO_Config.GPIO_PinNumber = GPIO_PIN4;
	//GPIO_Init(&SPIPins);

	// SCLK
	SPIPins.GPIO_Config.GPIO_PinNumber = GPIO_PIN5;
 8000202:	2305      	movs	r3, #5
 8000204:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f973 	bl	80004f4 <GPIO_Init>
	// MISO
	//SPIPins.GPIO_Config.GPIO_PinNumber = GPIO_PIN6;
	//GPIO_Init(&SPIPins);

	// MOSI
	SPIPins.GPIO_Config.GPIO_PinNumber = GPIO_PIN7;
 800020e:	2307      	movs	r3, #7
 8000210:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f000 f96d 	bl	80004f4 <GPIO_Init>
}
 800021a:	bf00      	nop
 800021c:	3710      	adds	r7, #16
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	40020000 	.word	0x40020000

08000228 <SPI1_init>:

void SPI1_init(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI1Handle;

	SPI1Handle.pSPIx = SPI1;
 800022e:	4b0c      	ldr	r3, [pc, #48]	; (8000260 <SPI1_init+0x38>)
 8000230:	607b      	str	r3, [r7, #4]
	SPI1Handle.SPI_Config.SPI_busConfig = SPI_BUS_CNFG_FD;
 8000232:	2301      	movs	r3, #1
 8000234:	727b      	strb	r3, [r7, #9]
	SPI1Handle.SPI_Config.SPI_devMode = SPI_DEVICE_MODE_MASTER;
 8000236:	2301      	movs	r3, #1
 8000238:	723b      	strb	r3, [r7, #8]
	SPI1Handle.SPI_Config.SPI_Speed = SPI_SCLK_SPPED_DIV2;
 800023a:	2300      	movs	r3, #0
 800023c:	73bb      	strb	r3, [r7, #14]
	SPI1Handle.SPI_Config.SPI_SSM = SPI_SSM_EN;
 800023e:	2301      	movs	r3, #1
 8000240:	737b      	strb	r3, [r7, #13]
	SPI1Handle.SPI_Config.SPI_DFF = SPI_DFF_8BITS;
 8000242:	2300      	movs	r3, #0
 8000244:	72bb      	strb	r3, [r7, #10]
	SPI1Handle.SPI_Config.SPI_CPHA = SPI_CPHA_FIRST_CLK;
 8000246:	2300      	movs	r3, #0
 8000248:	72fb      	strb	r3, [r7, #11]
	SPI1Handle.SPI_Config.SPI_CPOL = SPI_CPOL_LOW;
 800024a:	2300      	movs	r3, #0
 800024c:	733b      	strb	r3, [r7, #12]

	SPI_Init(&SPI1Handle);
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	4618      	mov	r0, r3
 8000252:	f000 fb57 	bl	8000904 <SPI_Init>
}
 8000256:	bf00      	nop
 8000258:	3710      	adds	r7, #16
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	40013000 	.word	0x40013000

08000264 <GPIO_ButtonInit>:


void GPIO_ButtonInit(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
	GPIO_Handle_t gpioButn;

	gpioButn.pGPIOx = GPIOC;
 800026a:	4b09      	ldr	r3, [pc, #36]	; (8000290 <GPIO_ButtonInit+0x2c>)
 800026c:	607b      	str	r3, [r7, #4]
	gpioButn.GPIO_Config.GPIO_PinNumber = GPIO_PIN13;
 800026e:	230d      	movs	r3, #13
 8000270:	723b      	strb	r3, [r7, #8]
	gpioButn.GPIO_Config.GPIO_PinMode = GPIO_MODE_IN;
 8000272:	2300      	movs	r3, #0
 8000274:	727b      	strb	r3, [r7, #9]
	gpioButn.GPIO_Config.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000276:	2302      	movs	r3, #2
 8000278:	72bb      	strb	r3, [r7, #10]
	//gpioButn.GPIO_Config.GPIO_PinOPType = GPIO_OP_TYPE_PP; 	// here this is not required because external pull up already their & no external pull down
	gpioButn.GPIO_Config.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800027a:	2300      	movs	r3, #0
 800027c:	72fb      	strb	r3, [r7, #11]

	//GPIO_PeriClockControl(GPIOC, ENABLE);
	GPIO_Init(&gpioButn);
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	4618      	mov	r0, r3
 8000282:	f000 f937 	bl	80004f4 <GPIO_Init>
}
 8000286:	bf00      	nop
 8000288:	3710      	adds	r7, #16
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	40020800 	.word	0x40020800

08000294 <Delay>:

void Delay(void)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000/2; i++);
 800029a:	2300      	movs	r3, #0
 800029c:	607b      	str	r3, [r7, #4]
 800029e:	e002      	b.n	80002a6 <Delay+0x12>
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	3301      	adds	r3, #1
 80002a4:	607b      	str	r3, [r7, #4]
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	4a04      	ldr	r2, [pc, #16]	; (80002bc <Delay+0x28>)
 80002aa:	4293      	cmp	r3, r2
 80002ac:	d9f8      	bls.n	80002a0 <Delay+0xc>
}
 80002ae:	bf00      	nop
 80002b0:	bf00      	nop
 80002b2:	370c      	adds	r7, #12
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	0003d08f 	.word	0x0003d08f

080002c0 <main>:

int main(void)
{
 80002c0:	b590      	push	{r4, r7, lr}
 80002c2:	b087      	sub	sp, #28
 80002c4:	af00      	add	r7, sp, #0
	char user_data[] = "Hello World!";
 80002c6:	4b22      	ldr	r3, [pc, #136]	; (8000350 <main+0x90>)
 80002c8:	f107 0408 	add.w	r4, r7, #8
 80002cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002ce:	c407      	stmia	r4!, {r0, r1, r2}
 80002d0:	7023      	strb	r3, [r4, #0]

	GPIO_ButtonInit();
 80002d2:	f7ff ffc7 	bl	8000264 <GPIO_ButtonInit>

	// this function is used to initialize the GPIO pins to behave as SPI1 pins
	SPI1_GPIOInits();
 80002d6:	f7ff ff85 	bl	80001e4 <SPI1_GPIOInits>

	// configure the SPI1
	SPI1_init();
 80002da:	f7ff ffa5 	bl	8000228 <SPI1_init>

	SPI_SSOEConfig(SPI2,ENABLE);
 80002de:	2101      	movs	r1, #1
 80002e0:	481c      	ldr	r0, [pc, #112]	; (8000354 <main+0x94>)
 80002e2:	f000 fbce 	bl	8000a82 <SPI_SSOEConfig>

	while(1)
	{
		while(! GPIO_ReadFromInputPin(GPIOC,GPIO_PIN13));
 80002e6:	bf00      	nop
 80002e8:	210d      	movs	r1, #13
 80002ea:	481b      	ldr	r0, [pc, #108]	; (8000358 <main+0x98>)
 80002ec:	f000 fa84 	bl	80007f8 <GPIO_ReadFromInputPin>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d0f8      	beq.n	80002e8 <main+0x28>

		Delay();
 80002f6:	f7ff ffcd 	bl	8000294 <Delay>

		// this makes NSS signal internally high and avoids MODF error
		//SPI_SSIConfig(SPI1,ENABLE);

		// enable the SPI peripheral
		SPI_PeripheralControl(SPI1,ENABLE);
 80002fa:	2101      	movs	r1, #1
 80002fc:	4817      	ldr	r0, [pc, #92]	; (800035c <main+0x9c>)
 80002fe:	f000 fba0 	bl	8000a42 <SPI_PeripheralControl>

		// first send length information
		uint8_t dataLen = strlen(user_data);
 8000302:	f107 0308 	add.w	r3, r7, #8
 8000306:	4618      	mov	r0, r3
 8000308:	f7ff ff64 	bl	80001d4 <strlen>
 800030c:	4603      	mov	r3, r0
 800030e:	b2db      	uxtb	r3, r3
 8000310:	71fb      	strb	r3, [r7, #7]
		SPI_SendData(SPI1, &dataLen,1);
 8000312:	1dfb      	adds	r3, r7, #7
 8000314:	2201      	movs	r2, #1
 8000316:	4619      	mov	r1, r3
 8000318:	4810      	ldr	r0, [pc, #64]	; (800035c <main+0x9c>)
 800031a:	f000 fb5b 	bl	80009d4 <SPI_SendData>

		// Send data
		SPI_SendData(SPI1,(uint8_t *)user_data,strlen(user_data));
 800031e:	f107 0308 	add.w	r3, r7, #8
 8000322:	4618      	mov	r0, r3
 8000324:	f7ff ff56 	bl	80001d4 <strlen>
 8000328:	4602      	mov	r2, r0
 800032a:	f107 0308 	add.w	r3, r7, #8
 800032e:	4619      	mov	r1, r3
 8000330:	480a      	ldr	r0, [pc, #40]	; (800035c <main+0x9c>)
 8000332:	f000 fb4f 	bl	80009d4 <SPI_SendData>

		// lets confirm SPI is not busy
		while(SPI_GetFlagStatus(SPI1, SPI_BUSY_FLAG));
 8000336:	bf00      	nop
 8000338:	2180      	movs	r1, #128	; 0x80
 800033a:	4808      	ldr	r0, [pc, #32]	; (800035c <main+0x9c>)
 800033c:	f000 fb34 	bl	80009a8 <SPI_GetFlagStatus>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d1f8      	bne.n	8000338 <main+0x78>

		// disable SPI peripharal
		SPI_PeripheralControl(SPI1, DISABLE);
 8000346:	2100      	movs	r1, #0
 8000348:	4804      	ldr	r0, [pc, #16]	; (800035c <main+0x9c>)
 800034a:	f000 fb7a 	bl	8000a42 <SPI_PeripheralControl>
	{
 800034e:	e7ca      	b.n	80002e6 <main+0x26>
 8000350:	08000b24 	.word	0x08000b24
 8000354:	40003800 	.word	0x40003800
 8000358:	40020800 	.word	0x40020800
 800035c:	40013000 	.word	0x40013000

08000360 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000360:	480d      	ldr	r0, [pc, #52]	; (8000398 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000362:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000364:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000368:	480c      	ldr	r0, [pc, #48]	; (800039c <LoopForever+0x6>)
  ldr r1, =_edata
 800036a:	490d      	ldr	r1, [pc, #52]	; (80003a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800036c:	4a0d      	ldr	r2, [pc, #52]	; (80003a4 <LoopForever+0xe>)
  movs r3, #0
 800036e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000370:	e002      	b.n	8000378 <LoopCopyDataInit>

08000372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000376:	3304      	adds	r3, #4

08000378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800037a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800037c:	d3f9      	bcc.n	8000372 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037e:	4a0a      	ldr	r2, [pc, #40]	; (80003a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000380:	4c0a      	ldr	r4, [pc, #40]	; (80003ac <LoopForever+0x16>)
  movs r3, #0
 8000382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000384:	e001      	b.n	800038a <LoopFillZerobss>

08000386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000388:	3204      	adds	r2, #4

0800038a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800038a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800038c:	d3fb      	bcc.n	8000386 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800038e:	f000 fb99 	bl	8000ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000392:	f7ff ff95 	bl	80002c0 <main>

08000396 <LoopForever>:

LoopForever:
    b LoopForever
 8000396:	e7fe      	b.n	8000396 <LoopForever>
  ldr   r0, =_estack
 8000398:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800039c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a4:	08000b3c 	.word	0x08000b3c
  ldr r2, =_sbss
 80003a8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003ac:	2000001c 	.word	0x2000001c

080003b0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b0:	e7fe      	b.n	80003b0 <ADC_IRQHandler>
	...

080003b4 <GPIO_PeriClockControl>:
*
* @Note			- none
*/

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx,uint8_t EnorDi)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
 80003bc:	460b      	mov	r3, r1
 80003be:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80003c0:	78fb      	ldrb	r3, [r7, #3]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d141      	bne.n	800044a <GPIO_PeriClockControl+0x96>
	{
		if(pGPIOx == GPIOA)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4a43      	ldr	r2, [pc, #268]	; (80004d8 <GPIO_PeriClockControl+0x124>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d106      	bne.n	80003dc <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80003ce:	4b43      	ldr	r3, [pc, #268]	; (80004dc <GPIO_PeriClockControl+0x128>)
 80003d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d2:	4a42      	ldr	r2, [pc, #264]	; (80004dc <GPIO_PeriClockControl+0x128>)
 80003d4:	f043 0301 	orr.w	r3, r3, #1
 80003d8:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}
 80003da:	e077      	b.n	80004cc <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOB)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	4a40      	ldr	r2, [pc, #256]	; (80004e0 <GPIO_PeriClockControl+0x12c>)
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d106      	bne.n	80003f2 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003e4:	4b3d      	ldr	r3, [pc, #244]	; (80004dc <GPIO_PeriClockControl+0x128>)
 80003e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e8:	4a3c      	ldr	r2, [pc, #240]	; (80004dc <GPIO_PeriClockControl+0x128>)
 80003ea:	f043 0302 	orr.w	r3, r3, #2
 80003ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f0:	e06c      	b.n	80004cc <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOC)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4a3b      	ldr	r2, [pc, #236]	; (80004e4 <GPIO_PeriClockControl+0x130>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d106      	bne.n	8000408 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003fa:	4b38      	ldr	r3, [pc, #224]	; (80004dc <GPIO_PeriClockControl+0x128>)
 80003fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fe:	4a37      	ldr	r2, [pc, #220]	; (80004dc <GPIO_PeriClockControl+0x128>)
 8000400:	f043 0304 	orr.w	r3, r3, #4
 8000404:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000406:	e061      	b.n	80004cc <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOD)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4a37      	ldr	r2, [pc, #220]	; (80004e8 <GPIO_PeriClockControl+0x134>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d106      	bne.n	800041e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000410:	4b32      	ldr	r3, [pc, #200]	; (80004dc <GPIO_PeriClockControl+0x128>)
 8000412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000414:	4a31      	ldr	r2, [pc, #196]	; (80004dc <GPIO_PeriClockControl+0x128>)
 8000416:	f043 0308 	orr.w	r3, r3, #8
 800041a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800041c:	e056      	b.n	80004cc <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOE)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4a32      	ldr	r2, [pc, #200]	; (80004ec <GPIO_PeriClockControl+0x138>)
 8000422:	4293      	cmp	r3, r2
 8000424:	d106      	bne.n	8000434 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000426:	4b2d      	ldr	r3, [pc, #180]	; (80004dc <GPIO_PeriClockControl+0x128>)
 8000428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042a:	4a2c      	ldr	r2, [pc, #176]	; (80004dc <GPIO_PeriClockControl+0x128>)
 800042c:	f043 0310 	orr.w	r3, r3, #16
 8000430:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000432:	e04b      	b.n	80004cc <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOH)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4a2e      	ldr	r2, [pc, #184]	; (80004f0 <GPIO_PeriClockControl+0x13c>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d147      	bne.n	80004cc <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 800043c:	4b27      	ldr	r3, [pc, #156]	; (80004dc <GPIO_PeriClockControl+0x128>)
 800043e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000440:	4a26      	ldr	r2, [pc, #152]	; (80004dc <GPIO_PeriClockControl+0x128>)
 8000442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000446:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000448:	e040      	b.n	80004cc <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4a22      	ldr	r2, [pc, #136]	; (80004d8 <GPIO_PeriClockControl+0x124>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d106      	bne.n	8000460 <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 8000452:	4b22      	ldr	r3, [pc, #136]	; (80004dc <GPIO_PeriClockControl+0x128>)
 8000454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000456:	4a21      	ldr	r2, [pc, #132]	; (80004dc <GPIO_PeriClockControl+0x128>)
 8000458:	f023 0301 	bic.w	r3, r3, #1
 800045c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800045e:	e035      	b.n	80004cc <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOB)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4a1f      	ldr	r2, [pc, #124]	; (80004e0 <GPIO_PeriClockControl+0x12c>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d106      	bne.n	8000476 <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 8000468:	4b1c      	ldr	r3, [pc, #112]	; (80004dc <GPIO_PeriClockControl+0x128>)
 800046a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046c:	4a1b      	ldr	r2, [pc, #108]	; (80004dc <GPIO_PeriClockControl+0x128>)
 800046e:	f023 0302 	bic.w	r3, r3, #2
 8000472:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000474:	e02a      	b.n	80004cc <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOC)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4a1a      	ldr	r2, [pc, #104]	; (80004e4 <GPIO_PeriClockControl+0x130>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d106      	bne.n	800048c <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 800047e:	4b17      	ldr	r3, [pc, #92]	; (80004dc <GPIO_PeriClockControl+0x128>)
 8000480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000482:	4a16      	ldr	r2, [pc, #88]	; (80004dc <GPIO_PeriClockControl+0x128>)
 8000484:	f023 0304 	bic.w	r3, r3, #4
 8000488:	6313      	str	r3, [r2, #48]	; 0x30
}
 800048a:	e01f      	b.n	80004cc <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOD)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4a16      	ldr	r2, [pc, #88]	; (80004e8 <GPIO_PeriClockControl+0x134>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d106      	bne.n	80004a2 <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 8000494:	4b11      	ldr	r3, [pc, #68]	; (80004dc <GPIO_PeriClockControl+0x128>)
 8000496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000498:	4a10      	ldr	r2, [pc, #64]	; (80004dc <GPIO_PeriClockControl+0x128>)
 800049a:	f023 0308 	bic.w	r3, r3, #8
 800049e:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a0:	e014      	b.n	80004cc <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOE)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4a11      	ldr	r2, [pc, #68]	; (80004ec <GPIO_PeriClockControl+0x138>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d106      	bne.n	80004b8 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 80004aa:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <GPIO_PeriClockControl+0x128>)
 80004ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ae:	4a0b      	ldr	r2, [pc, #44]	; (80004dc <GPIO_PeriClockControl+0x128>)
 80004b0:	f023 0310 	bic.w	r3, r3, #16
 80004b4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b6:	e009      	b.n	80004cc <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOH)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4a0d      	ldr	r2, [pc, #52]	; (80004f0 <GPIO_PeriClockControl+0x13c>)
 80004bc:	4293      	cmp	r3, r2
 80004be:	d105      	bne.n	80004cc <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DI();
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <GPIO_PeriClockControl+0x128>)
 80004c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c4:	4a05      	ldr	r2, [pc, #20]	; (80004dc <GPIO_PeriClockControl+0x128>)
 80004c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004cc:	bf00      	nop
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr
 80004d8:	40020000 	.word	0x40020000
 80004dc:	40023800 	.word	0x40023800
 80004e0:	40020400 	.word	0x40020400
 80004e4:	40020800 	.word	0x40020800
 80004e8:	40020c00 	.word	0x40020c00
 80004ec:	40021000 	.word	0x40021000
 80004f0:	40021c00 	.word	0x40021c00

080004f4 <GPIO_Init>:
* @return		- none
*
* @Note			- none
*/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	uint32_t temp =0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	617b      	str	r3, [r7, #20]

	// enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2101      	movs	r1, #1
 8000506:	4618      	mov	r0, r3
 8000508:	f7ff ff54 	bl	80003b4 <GPIO_PeriClockControl>


	//	1. configure the mode of pin
	if(pGPIOHandle->GPIO_Config.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	795b      	ldrb	r3, [r3, #5]
 8000510:	2b03      	cmp	r3, #3
 8000512:	d821      	bhi.n	8000558 <GPIO_Init+0x64>
	{
		// here the multiply of 2 with the pin number will be setting the mode,because 2 bits for each reg
		temp = (pGPIOHandle->GPIO_Config.GPIO_PinMode << (2* pGPIOHandle->GPIO_Config.GPIO_PinNumber));
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	795b      	ldrb	r3, [r3, #5]
 8000518:	461a      	mov	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	791b      	ldrb	r3, [r3, #4]
 800051e:	005b      	lsls	r3, r3, #1
 8000520:	fa02 f303 	lsl.w	r3, r2, r3
 8000524:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << pGPIOHandle->GPIO_Config.GPIO_PinNumber);   // clearing the bit
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	681a      	ldr	r2, [r3, #0]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	791b      	ldrb	r3, [r3, #4]
 8000530:	4619      	mov	r1, r3
 8000532:	2303      	movs	r3, #3
 8000534:	408b      	lsls	r3, r1
 8000536:	43db      	mvns	r3, r3
 8000538:	4619      	mov	r1, r3
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	400a      	ands	r2, r1
 8000540:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;	// setting the bits
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	6819      	ldr	r1, [r3, #0]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	697a      	ldr	r2, [r7, #20]
 800054e:	430a      	orrs	r2, r1
 8000550:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	617b      	str	r3, [r7, #20]
 8000556:	e0a1      	b.n	800069c <GPIO_Init+0x1a8>
	}
	else
	{
		// interrupt mode
		if(pGPIOHandle->GPIO_Config.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	795b      	ldrb	r3, [r3, #5]
 800055c:	2b04      	cmp	r3, #4
 800055e:	d117      	bne.n	8000590 <GPIO_Init+0x9c>
		{
			// 1. configure the falling edge strigger status register(FTSR)
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_Config.GPIO_PinNumber); // clearing the bit
 8000560:	4b9c      	ldr	r3, [pc, #624]	; (80007d4 <GPIO_Init+0x2e0>)
 8000562:	689b      	ldr	r3, [r3, #8]
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	7912      	ldrb	r2, [r2, #4]
 8000568:	4611      	mov	r1, r2
 800056a:	2201      	movs	r2, #1
 800056c:	408a      	lsls	r2, r1
 800056e:	43d2      	mvns	r2, r2
 8000570:	4611      	mov	r1, r2
 8000572:	4a98      	ldr	r2, [pc, #608]	; (80007d4 <GPIO_Init+0x2e0>)
 8000574:	400b      	ands	r3, r1
 8000576:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_Config.GPIO_PinNumber);	// setting the bit
 8000578:	4b96      	ldr	r3, [pc, #600]	; (80007d4 <GPIO_Init+0x2e0>)
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	7912      	ldrb	r2, [r2, #4]
 8000580:	4611      	mov	r1, r2
 8000582:	2201      	movs	r2, #1
 8000584:	408a      	lsls	r2, r1
 8000586:	4611      	mov	r1, r2
 8000588:	4a92      	ldr	r2, [pc, #584]	; (80007d4 <GPIO_Init+0x2e0>)
 800058a:	430b      	orrs	r3, r1
 800058c:	60d3      	str	r3, [r2, #12]
 800058e:	e035      	b.n	80005fc <GPIO_Init+0x108>
		}
		else if(pGPIOHandle->GPIO_Config.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	795b      	ldrb	r3, [r3, #5]
 8000594:	2b05      	cmp	r3, #5
 8000596:	d117      	bne.n	80005c8 <GPIO_Init+0xd4>
		{
			// 1. configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_Config.GPIO_PinNumber); // setting the bit
 8000598:	4b8e      	ldr	r3, [pc, #568]	; (80007d4 <GPIO_Init+0x2e0>)
 800059a:	689b      	ldr	r3, [r3, #8]
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	7912      	ldrb	r2, [r2, #4]
 80005a0:	4611      	mov	r1, r2
 80005a2:	2201      	movs	r2, #1
 80005a4:	408a      	lsls	r2, r1
 80005a6:	4611      	mov	r1, r2
 80005a8:	4a8a      	ldr	r2, [pc, #552]	; (80007d4 <GPIO_Init+0x2e0>)
 80005aa:	430b      	orrs	r3, r1
 80005ac:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_Config.GPIO_PinNumber);	// clearing the bit
 80005ae:	4b89      	ldr	r3, [pc, #548]	; (80007d4 <GPIO_Init+0x2e0>)
 80005b0:	68db      	ldr	r3, [r3, #12]
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	7912      	ldrb	r2, [r2, #4]
 80005b6:	4611      	mov	r1, r2
 80005b8:	2201      	movs	r2, #1
 80005ba:	408a      	lsls	r2, r1
 80005bc:	43d2      	mvns	r2, r2
 80005be:	4611      	mov	r1, r2
 80005c0:	4a84      	ldr	r2, [pc, #528]	; (80007d4 <GPIO_Init+0x2e0>)
 80005c2:	400b      	ands	r3, r1
 80005c4:	60d3      	str	r3, [r2, #12]
 80005c6:	e019      	b.n	80005fc <GPIO_Init+0x108>
		}
		else if(pGPIOHandle->GPIO_Config.GPIO_PinMode == GPIO_MODE_IT_FTRT)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	795b      	ldrb	r3, [r3, #5]
 80005cc:	2b06      	cmp	r3, #6
 80005ce:	d115      	bne.n	80005fc <GPIO_Init+0x108>
		{
			// 1. configure both fallig and rising edge
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_Config.GPIO_PinNumber); // clearing the bit
 80005d0:	4b80      	ldr	r3, [pc, #512]	; (80007d4 <GPIO_Init+0x2e0>)
 80005d2:	689b      	ldr	r3, [r3, #8]
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	7912      	ldrb	r2, [r2, #4]
 80005d8:	4611      	mov	r1, r2
 80005da:	2201      	movs	r2, #1
 80005dc:	408a      	lsls	r2, r1
 80005de:	4611      	mov	r1, r2
 80005e0:	4a7c      	ldr	r2, [pc, #496]	; (80007d4 <GPIO_Init+0x2e0>)
 80005e2:	430b      	orrs	r3, r1
 80005e4:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_Config.GPIO_PinNumber);	// setting the bit
 80005e6:	4b7b      	ldr	r3, [pc, #492]	; (80007d4 <GPIO_Init+0x2e0>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	7912      	ldrb	r2, [r2, #4]
 80005ee:	4611      	mov	r1, r2
 80005f0:	2201      	movs	r2, #1
 80005f2:	408a      	lsls	r2, r1
 80005f4:	4611      	mov	r1, r2
 80005f6:	4a77      	ldr	r2, [pc, #476]	; (80007d4 <GPIO_Init+0x2e0>)
 80005f8:	430b      	orrs	r3, r1
 80005fa:	60d3      	str	r3, [r2, #12]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_Config.GPIO_PinNumber/4;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	791b      	ldrb	r3, [r3, #4]
 8000600:	089b      	lsrs	r3, r3, #2
 8000602:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_Config.GPIO_PinNumber%4;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	791b      	ldrb	r3, [r3, #4]
 8000608:	f003 0303 	and.w	r3, r3, #3
 800060c:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a71      	ldr	r2, [pc, #452]	; (80007d8 <GPIO_Init+0x2e4>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d024      	beq.n	8000662 <GPIO_Init+0x16e>
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a6f      	ldr	r2, [pc, #444]	; (80007dc <GPIO_Init+0x2e8>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d01d      	beq.n	800065e <GPIO_Init+0x16a>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a6e      	ldr	r2, [pc, #440]	; (80007e0 <GPIO_Init+0x2ec>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d016      	beq.n	800065a <GPIO_Init+0x166>
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a6c      	ldr	r2, [pc, #432]	; (80007e4 <GPIO_Init+0x2f0>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d00f      	beq.n	8000656 <GPIO_Init+0x162>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a6b      	ldr	r2, [pc, #428]	; (80007e8 <GPIO_Init+0x2f4>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d008      	beq.n	8000652 <GPIO_Init+0x15e>
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a69      	ldr	r2, [pc, #420]	; (80007ec <GPIO_Init+0x2f8>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d101      	bne.n	800064e <GPIO_Init+0x15a>
 800064a:	2305      	movs	r3, #5
 800064c:	e00a      	b.n	8000664 <GPIO_Init+0x170>
 800064e:	2300      	movs	r3, #0
 8000650:	e008      	b.n	8000664 <GPIO_Init+0x170>
 8000652:	2304      	movs	r3, #4
 8000654:	e006      	b.n	8000664 <GPIO_Init+0x170>
 8000656:	2303      	movs	r3, #3
 8000658:	e004      	b.n	8000664 <GPIO_Init+0x170>
 800065a:	2302      	movs	r3, #2
 800065c:	e002      	b.n	8000664 <GPIO_Init+0x170>
 800065e:	2301      	movs	r3, #1
 8000660:	e000      	b.n	8000664 <GPIO_Init+0x170>
 8000662:	2300      	movs	r3, #0
 8000664:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000666:	4b62      	ldr	r3, [pc, #392]	; (80007f0 <GPIO_Init+0x2fc>)
 8000668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066a:	4a61      	ldr	r2, [pc, #388]	; (80007f0 <GPIO_Init+0x2fc>)
 800066c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000670:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000672:	7c7a      	ldrb	r2, [r7, #17]
 8000674:	7cbb      	ldrb	r3, [r7, #18]
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	fa02 f103 	lsl.w	r1, r2, r3
 800067c:	4a5d      	ldr	r2, [pc, #372]	; (80007f4 <GPIO_Init+0x300>)
 800067e:	7cfb      	ldrb	r3, [r7, #19]
 8000680:	3302      	adds	r3, #2
 8000682:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		// 3. enable the exti interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_Config.GPIO_PinNumber);
 8000686:	4b53      	ldr	r3, [pc, #332]	; (80007d4 <GPIO_Init+0x2e0>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	7912      	ldrb	r2, [r2, #4]
 800068e:	4611      	mov	r1, r2
 8000690:	2201      	movs	r2, #1
 8000692:	408a      	lsls	r2, r1
 8000694:	4611      	mov	r1, r2
 8000696:	4a4f      	ldr	r2, [pc, #316]	; (80007d4 <GPIO_Init+0x2e0>)
 8000698:	430b      	orrs	r3, r1
 800069a:	6013      	str	r3, [r2, #0]
	}


	// 2. configure the speed
	temp =0;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_Config.GPIO_PinSpeed << (2* pGPIOHandle->GPIO_Config.GPIO_PinNumber));
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	799b      	ldrb	r3, [r3, #6]
 80006a4:	461a      	mov	r2, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	791b      	ldrb	r3, [r3, #4]
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	fa02 f303 	lsl.w	r3, r2, r3
 80006b0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= (0x03 << pGPIOHandle->GPIO_Config.GPIO_PinNumber);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	689a      	ldr	r2, [r3, #8]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	791b      	ldrb	r3, [r3, #4]
 80006bc:	4619      	mov	r1, r3
 80006be:	2303      	movs	r3, #3
 80006c0:	408b      	lsls	r3, r1
 80006c2:	4619      	mov	r1, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	400a      	ands	r2, r1
 80006ca:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	6899      	ldr	r1, [r3, #8]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	697a      	ldr	r2, [r7, #20]
 80006d8:	430a      	orrs	r2, r1
 80006da:	609a      	str	r2, [r3, #8]

	// 3. configure the output type
	temp =0;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_Config.GPIO_PinOPType  << pGPIOHandle->GPIO_Config.GPIO_PinNumber);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	7a1b      	ldrb	r3, [r3, #8]
 80006e4:	461a      	mov	r2, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	791b      	ldrb	r3, [r3, #4]
 80006ea:	fa02 f303 	lsl.w	r3, r2, r3
 80006ee:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= (0x1 << pGPIOHandle->GPIO_Config.GPIO_PinNumber);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	685a      	ldr	r2, [r3, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	791b      	ldrb	r3, [r3, #4]
 80006fa:	4619      	mov	r1, r3
 80006fc:	2301      	movs	r3, #1
 80006fe:	408b      	lsls	r3, r1
 8000700:	4619      	mov	r1, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	400a      	ands	r2, r1
 8000708:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	6859      	ldr	r1, [r3, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	697a      	ldr	r2, [r7, #20]
 8000716:	430a      	orrs	r2, r1
 8000718:	605a      	str	r2, [r3, #4]

	// 4. configure the pullup and pulldown
	temp =0;
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_Config.GPIO_PinPuPdControl << (2* pGPIOHandle->GPIO_Config.GPIO_PinNumber));
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	79db      	ldrb	r3, [r3, #7]
 8000722:	461a      	mov	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	791b      	ldrb	r3, [r3, #4]
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	fa02 f303 	lsl.w	r3, r2, r3
 800072e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= (0x03 << pGPIOHandle->GPIO_Config.GPIO_PinNumber);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	68da      	ldr	r2, [r3, #12]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	791b      	ldrb	r3, [r3, #4]
 800073a:	4619      	mov	r1, r3
 800073c:	2303      	movs	r3, #3
 800073e:	408b      	lsls	r3, r1
 8000740:	4619      	mov	r1, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	400a      	ands	r2, r1
 8000748:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	68d9      	ldr	r1, [r3, #12]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	697a      	ldr	r2, [r7, #20]
 8000756:	430a      	orrs	r2, r1
 8000758:	60da      	str	r2, [r3, #12]

	// 5. configure the alternate functionality
	temp =0;
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]
	if(pGPIOHandle->GPIO_Config.GPIO_PinAltFunMode == GPIO_MODE_ALTFN)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	7a5b      	ldrb	r3, [r3, #9]
 8000762:	2b02      	cmp	r3, #2
 8000764:	d132      	bne.n	80007cc <GPIO_Init+0x2d8>

		// as the alternate function mode is having the two array elements high/low
		// here temp1 is used for selecting AFRH/AFRL
		// here temp2 is used for selecting the bytes in the AFRH or AFRL

		temp1 = pGPIOHandle->GPIO_Config.GPIO_PinNumber / 8;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	791b      	ldrb	r3, [r3, #4]
 800076a:	08db      	lsrs	r3, r3, #3
 800076c:	b2db      	uxtb	r3, r3
 800076e:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandle->GPIO_Config.GPIO_PinNumber % 8;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	791b      	ldrb	r3, [r3, #4]
 8000774:	f003 0307 	and.w	r3, r3, #7
 8000778:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	68fa      	ldr	r2, [r7, #12]
 8000780:	3208      	adds	r2, #8
 8000782:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	210f      	movs	r1, #15
 800078c:	fa01 f303 	lsl.w	r3, r1, r3
 8000790:	43db      	mvns	r3, r3
 8000792:	4619      	mov	r1, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4011      	ands	r1, r2
 800079a:	68fa      	ldr	r2, [r7, #12]
 800079c:	3208      	adds	r2, #8
 800079e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_Config.GPIO_PinAltFunMode << (4 * temp2));
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	68fa      	ldr	r2, [r7, #12]
 80007a8:	3208      	adds	r2, #8
 80007aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	7a5b      	ldrb	r3, [r3, #9]
 80007b2:	4619      	mov	r1, r3
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	fa01 f303 	lsl.w	r3, r1, r3
 80007bc:	4619      	mov	r1, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4311      	orrs	r1, r2
 80007c4:	68fa      	ldr	r2, [r7, #12]
 80007c6:	3208      	adds	r2, #8
 80007c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80007cc:	bf00      	nop
 80007ce:	3718      	adds	r7, #24
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40013c00 	.word	0x40013c00
 80007d8:	40020000 	.word	0x40020000
 80007dc:	40020400 	.word	0x40020400
 80007e0:	40020800 	.word	0x40020800
 80007e4:	40020c00 	.word	0x40020c00
 80007e8:	40021000 	.word	0x40021000
 80007ec:	40021c00 	.word	0x40021c00
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40013800 	.word	0x40013800

080007f8 <GPIO_ReadFromInputPin>:
* @return		- none
*
* @Note			- none
*/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx,uint8_t PinNumber)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	// to get the particualr value of the IDR register right shifted and masked to 1, for getting the value of the bit
	value = pGPIOx->IDR >> PinNumber & 0x00000001;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	691a      	ldr	r2, [r3, #16]
 8000808:	78fb      	ldrb	r3, [r7, #3]
 800080a:	fa22 f303 	lsr.w	r3, r2, r3
 800080e:	b2db      	uxtb	r3, r3
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	73fb      	strb	r3, [r7, #15]
	return value;
 8000816:	7bfb      	ldrb	r3, [r7, #15]
}
 8000818:	4618      	mov	r0, r3
 800081a:	3714      	adds	r7, #20
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <SPI_PeriClockControl>:
* @return		- none
*
* @Note			- none
*/
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx,uint8_t EnorDi)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000830:	78fb      	ldrb	r3, [r7, #3]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d12b      	bne.n	800088e <SPI_PeriClockControl+0x6a>
	{
		if(pSPIx == SPI1)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4a2d      	ldr	r2, [pc, #180]	; (80008f0 <SPI_PeriClockControl+0xcc>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d106      	bne.n	800084c <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 800083e:	4b2d      	ldr	r3, [pc, #180]	; (80008f4 <SPI_PeriClockControl+0xd0>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	4a2c      	ldr	r2, [pc, #176]	; (80008f4 <SPI_PeriClockControl+0xd0>)
 8000844:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000848:	6453      	str	r3, [r2, #68]	; 0x44
		else if(pSPIx == SPI4)
		{
			SPI4_PCLK_DI();
		}
	}
}
 800084a:	e04b      	b.n	80008e4 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI2)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4a2a      	ldr	r2, [pc, #168]	; (80008f8 <SPI_PeriClockControl+0xd4>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d106      	bne.n	8000862 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000854:	4b27      	ldr	r3, [pc, #156]	; (80008f4 <SPI_PeriClockControl+0xd0>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000858:	4a26      	ldr	r2, [pc, #152]	; (80008f4 <SPI_PeriClockControl+0xd0>)
 800085a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800085e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000860:	e040      	b.n	80008e4 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI3)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4a25      	ldr	r2, [pc, #148]	; (80008fc <SPI_PeriClockControl+0xd8>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d106      	bne.n	8000878 <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 800086a:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <SPI_PeriClockControl+0xd0>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	4a21      	ldr	r2, [pc, #132]	; (80008f4 <SPI_PeriClockControl+0xd0>)
 8000870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000874:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000876:	e035      	b.n	80008e4 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI4)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4a21      	ldr	r2, [pc, #132]	; (8000900 <SPI_PeriClockControl+0xdc>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d131      	bne.n	80008e4 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_EN();
 8000880:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <SPI_PeriClockControl+0xd0>)
 8000882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000884:	4a1b      	ldr	r2, [pc, #108]	; (80008f4 <SPI_PeriClockControl+0xd0>)
 8000886:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800088a:	6453      	str	r3, [r2, #68]	; 0x44
}
 800088c:	e02a      	b.n	80008e4 <SPI_PeriClockControl+0xc0>
		if(pSPIx == SPI1)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4a17      	ldr	r2, [pc, #92]	; (80008f0 <SPI_PeriClockControl+0xcc>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d106      	bne.n	80008a4 <SPI_PeriClockControl+0x80>
			SPI1_PCLK_DI();
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <SPI_PeriClockControl+0xd0>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089a:	4a16      	ldr	r2, [pc, #88]	; (80008f4 <SPI_PeriClockControl+0xd0>)
 800089c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008a0:	6453      	str	r3, [r2, #68]	; 0x44
}
 80008a2:	e01f      	b.n	80008e4 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI2)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a14      	ldr	r2, [pc, #80]	; (80008f8 <SPI_PeriClockControl+0xd4>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d106      	bne.n	80008ba <SPI_PeriClockControl+0x96>
			SPI2_PCLK_DI();
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <SPI_PeriClockControl+0xd0>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b0:	4a10      	ldr	r2, [pc, #64]	; (80008f4 <SPI_PeriClockControl+0xd0>)
 80008b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008b6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008b8:	e014      	b.n	80008e4 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI3)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <SPI_PeriClockControl+0xd8>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d106      	bne.n	80008d0 <SPI_PeriClockControl+0xac>
			SPI3_PCLK_DI();
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <SPI_PeriClockControl+0xd0>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	4a0b      	ldr	r2, [pc, #44]	; (80008f4 <SPI_PeriClockControl+0xd0>)
 80008c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80008cc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008ce:	e009      	b.n	80008e4 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI4)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	4a0b      	ldr	r2, [pc, #44]	; (8000900 <SPI_PeriClockControl+0xdc>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d105      	bne.n	80008e4 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_DI();
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <SPI_PeriClockControl+0xd0>)
 80008da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008dc:	4a05      	ldr	r2, [pc, #20]	; (80008f4 <SPI_PeriClockControl+0xd0>)
 80008de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80008e2:	6453      	str	r3, [r2, #68]	; 0x44
}
 80008e4:	bf00      	nop
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	40013000 	.word	0x40013000
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40003800 	.word	0x40003800
 80008fc:	40003c00 	.word	0x40003c00
 8000900:	40013400 	.word	0x40013400

08000904 <SPI_Init>:
* @return		- none
*
* @Note			- none
*/
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]

	// peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2101      	movs	r1, #1
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff ff84 	bl	8000824 <SPI_PeriClockControl>

	/* 1. configure the SPI_CR1_reg */
	tempreg = pSPIHandle->SPI_Config.SPI_devMode << SPI_CR1_MSTR;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	791b      	ldrb	r3, [r3, #4]
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	60fb      	str	r3, [r7, #12]

	/* 2. configure the bus config */
	if(pSPIHandle->SPI_Config.SPI_busConfig == SPI_BUS_CNFG_FD)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	795b      	ldrb	r3, [r3, #5]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d104      	bne.n	8000936 <SPI_Init+0x32>
	{
		// BIDIMODE should be cleared - for Full duplex mode
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	e014      	b.n	8000960 <SPI_Init+0x5c>
	}
	else if(pSPIHandle->SPI_Config.SPI_busConfig == SPI_BUS_CNFG_HD)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	795b      	ldrb	r3, [r3, #5]
 800093a:	2b02      	cmp	r3, #2
 800093c:	d104      	bne.n	8000948 <SPI_Init+0x44>
	{
		// BIDIMODE should be set - for Half duplex mode
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	e00b      	b.n	8000960 <SPI_Init+0x5c>
	}
	else if(pSPIHandle->SPI_Config.SPI_busConfig == SPI_BUS_CNFG_SIMPLEX_RXONLY)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	795b      	ldrb	r3, [r3, #5]
 800094c:	2b03      	cmp	r3, #3
 800094e:	d107      	bne.n	8000960 <SPI_Init+0x5c>
	{
		// BIDIMODE should be cleared
		// SET the RXONLY bit for simplex mode
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000956:	60fb      	str	r3, [r7, #12]
		tempreg |= (1 << SPI_CR1_RXONLY);
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800095e:	60fb      	str	r3, [r7, #12]
	}

	/* 3. Configure the spi serial clock speed (baud rate) */
	tempreg |= pSPIHandle->SPI_Config.SPI_Speed << SPI_CR1_BR;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	7a9b      	ldrb	r3, [r3, #10]
 8000964:	00db      	lsls	r3, r3, #3
 8000966:	461a      	mov	r2, r3
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	4313      	orrs	r3, r2
 800096c:	60fb      	str	r3, [r7, #12]

	/* 4. COnfigure the DFF */
	tempreg |= pSPIHandle->SPI_Config.SPI_DFF << SPI_CR1_DFF;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	799b      	ldrb	r3, [r3, #6]
 8000972:	02db      	lsls	r3, r3, #11
 8000974:	461a      	mov	r2, r3
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	4313      	orrs	r3, r2
 800097a:	60fb      	str	r3, [r7, #12]

	/* 5. Configure the CPOL */
	tempreg |= pSPIHandle->SPI_Config.SPI_CPOL << SPI_CR1_CPOL;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	7a1b      	ldrb	r3, [r3, #8]
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	461a      	mov	r2, r3
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	4313      	orrs	r3, r2
 8000988:	60fb      	str	r3, [r7, #12]

	/* 6. Configure the CPHA */
	tempreg |= pSPIHandle->SPI_Config.SPI_CPHA << SPI_CR1_CPHA;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	79db      	ldrb	r3, [r3, #7]
 800098e:	461a      	mov	r2, r3
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	4313      	orrs	r3, r2
 8000994:	60fb      	str	r3, [r7, #12]


	pSPIHandle->pSPIx->SPI_CR1 = tempreg;    // we can use the assignement operator becz of the fresh assignement
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	68fa      	ldr	r2, [r7, #12]
 800099c:	b2d2      	uxtb	r2, r2
 800099e:	701a      	strb	r2, [r3, #0]

}
 80009a0:	bf00      	nop
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <SPI_GetFlagStatus>:
* @return		- none
*
* @Note			- none
*/
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx,uint32_t FlagName)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	6039      	str	r1, [r7, #0]
	if((pSPIx->SPI_SR & FlagName))
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	789b      	ldrb	r3, [r3, #2]
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	461a      	mov	r2, r3
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	4013      	ands	r3, r2
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <SPI_GetFlagStatus+0x1e>
	{
		return FLG_SET;
 80009c2:	2301      	movs	r3, #1
 80009c4:	e000      	b.n	80009c8 <SPI_GetFlagStatus+0x20>
	}

	return FLG_RESET;
 80009c6:	2300      	movs	r3, #0
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <SPI_SendData>:
* @return		- none
*
* @Note			- This is bloacking call, used with while loop
*/
void SPI_SendData(SPI_RegDef_t *pSPIx,uint8_t *pTxBuffer,uint32_t len)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
	while(len > 0)
 80009e0:	e027      	b.n	8000a32 <SPI_SendData+0x5e>
	{
		// 1. wait untill TXE is set
		while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG) == FLG_RESET);
 80009e2:	bf00      	nop
 80009e4:	2102      	movs	r1, #2
 80009e6:	68f8      	ldr	r0, [r7, #12]
 80009e8:	f7ff ffde 	bl	80009a8 <SPI_GetFlagStatus>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d0f8      	beq.n	80009e4 <SPI_SendData+0x10>

		// 2. check the DFF bit is CR1
        if(pSPIx->SPI_CR1 & (1 << SPI_CR1_DFF))
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d00e      	beq.n	8000a1e <SPI_SendData+0x4a>
        {
        	// 16 bit DFF
        	// load the DR with the tx buffer
        	pSPIx->SPI_DR = *(uint16_t *)pTxBuffer;
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	881b      	ldrh	r3, [r3, #0]
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	70da      	strb	r2, [r3, #3]
        	len--;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	3b01      	subs	r3, #1
 8000a0e:	607b      	str	r3, [r7, #4]
        	len--;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3b01      	subs	r3, #1
 8000a14:	607b      	str	r3, [r7, #4]
        	(uint16_t *)pTxBuffer++;
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	e009      	b.n	8000a32 <SPI_SendData+0x5e>
        }
        else
        {
        	// 8 bit DFF
        	// load the DR with the tx buffer
			pSPIx->SPI_DR = *pTxBuffer;
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	781a      	ldrb	r2, [r3, #0]
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	70da      	strb	r2, [r3, #3]
			len--;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	60bb      	str	r3, [r7, #8]
	while(len > 0)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d1d4      	bne.n	80009e2 <SPI_SendData+0xe>
        }
	}
}
 8000a38:	bf00      	nop
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <SPI_PeripheralControl>:
* @return		- none
*
* @Note			- none
*/
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx,uint8_t EnorDi)
{
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000a4e:	78fb      	ldrb	r3, [r7, #3]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d108      	bne.n	8000a66 <SPI_PeripheralControl+0x24>
	{
		pSPIx->SPI_CR1 |= ( 1 << SPI_CR1_SPE);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		pSPIx->SPI_CR1 &= ~( 1 << SPI_CR1_SPE);
	}
}
 8000a64:	e007      	b.n	8000a76 <SPI_PeripheralControl+0x34>
		pSPIx->SPI_CR1 &= ~( 1 << SPI_CR1_SPE);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	701a      	strb	r2, [r3, #0]
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <SPI_SSOEConfig>:
* @return		- none
*
* @Note			- none
*/
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx,uint8_t EnorDi)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b083      	sub	sp, #12
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
 8000a8a:	460b      	mov	r3, r1
 8000a8c:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000a8e:	78fb      	ldrb	r3, [r7, #3]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d108      	bne.n	8000aa6 <SPI_SSOEConfig+0x24>
	{
		pSPIx->SPI_CR2 |= (1 << SPI_CR2_SSOE);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	785b      	ldrb	r3, [r3, #1]
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	f043 0304 	orr.w	r3, r3, #4
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	705a      	strb	r2, [r3, #1]
	}
	else
	{
		pSPIx->SPI_CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000aa4:	e007      	b.n	8000ab6 <SPI_SSOEConfig+0x34>
		pSPIx->SPI_CR2 &= ~(1 << SPI_CR2_SSOE);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	785b      	ldrb	r3, [r3, #1]
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	f023 0304 	bic.w	r3, r3, #4
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	705a      	strb	r2, [r3, #1]
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
	...

08000ac4 <__libc_init_array>:
 8000ac4:	b570      	push	{r4, r5, r6, lr}
 8000ac6:	4d0d      	ldr	r5, [pc, #52]	; (8000afc <__libc_init_array+0x38>)
 8000ac8:	4c0d      	ldr	r4, [pc, #52]	; (8000b00 <__libc_init_array+0x3c>)
 8000aca:	1b64      	subs	r4, r4, r5
 8000acc:	10a4      	asrs	r4, r4, #2
 8000ace:	2600      	movs	r6, #0
 8000ad0:	42a6      	cmp	r6, r4
 8000ad2:	d109      	bne.n	8000ae8 <__libc_init_array+0x24>
 8000ad4:	4d0b      	ldr	r5, [pc, #44]	; (8000b04 <__libc_init_array+0x40>)
 8000ad6:	4c0c      	ldr	r4, [pc, #48]	; (8000b08 <__libc_init_array+0x44>)
 8000ad8:	f000 f818 	bl	8000b0c <_init>
 8000adc:	1b64      	subs	r4, r4, r5
 8000ade:	10a4      	asrs	r4, r4, #2
 8000ae0:	2600      	movs	r6, #0
 8000ae2:	42a6      	cmp	r6, r4
 8000ae4:	d105      	bne.n	8000af2 <__libc_init_array+0x2e>
 8000ae6:	bd70      	pop	{r4, r5, r6, pc}
 8000ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aec:	4798      	blx	r3
 8000aee:	3601      	adds	r6, #1
 8000af0:	e7ee      	b.n	8000ad0 <__libc_init_array+0xc>
 8000af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000af6:	4798      	blx	r3
 8000af8:	3601      	adds	r6, #1
 8000afa:	e7f2      	b.n	8000ae2 <__libc_init_array+0x1e>
 8000afc:	08000b34 	.word	0x08000b34
 8000b00:	08000b34 	.word	0x08000b34
 8000b04:	08000b34 	.word	0x08000b34
 8000b08:	08000b38 	.word	0x08000b38

08000b0c <_init>:
 8000b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b0e:	bf00      	nop
 8000b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b12:	bc08      	pop	{r3}
 8000b14:	469e      	mov	lr, r3
 8000b16:	4770      	bx	lr

08000b18 <_fini>:
 8000b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b1a:	bf00      	nop
 8000b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b1e:	bc08      	pop	{r3}
 8000b20:	469e      	mov	lr, r3
 8000b22:	4770      	bx	lr
